from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart

from aiogram_dialog import DialogManager, StartMode

from keyboards.default.keyboard import auth_contact, main_menu, geo_send, add_money, remove_keyboard
from keyboards.inline.keyboard import location, check_lists_read
from loader import dp, db
from states.diaolg_states import DialogStates
from utils.check_lists import dialogs_manager


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message, state: FSMContext):
    await message.answer(f"""–ü—Ä–∏–≤—ñ—Çüëãüèª {message.from_user.full_name}!
–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ —É –±–æ—Ç—ñ. –¢—É—Ç —î —É—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, —è–∫–∞ –ø–æ–ª–µ–≥—à–∏—Ç—å —Ç–æ–±—ñ —Ä–æ–±–æ—Ç—É —â–æ–¥–Ω—èüî•
–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –∑–Ω–∏–∑—É""",
                         reply_markup=auth_contact)
    await state.set_state('auth')


@dp.message_handler(state='auth')
async def auth_text(message: types.Message):
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –∑–Ω–∏–∑—É",
                         reply_markup=auth_contact)


@dp.message_handler(content_types=types.ContentTypes.CONTACT, state='auth')
async def auth_tel(message: types.Message, state: FSMContext):
    await message.answer("–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –±–æ—Ç—ñ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–ºü§ñ",
                         reply_markup=main_menu)
    await state.finish()


@dp.message_handler(text="–ë–∞–∑–∞ –∑–Ω–∞–Ω—å")
async def base_knowledge(message: types.Message):
    await message.answer("–¢—É—Ç –±—É–¥–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—å —Ä—ñ–∑–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—é (Brand book),"
                         " —Ç–µ–ª–µ–≥—Ä–∞—Ñ–∏ –ø—Ä–æ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤, —ñ–Ω—Ñ–æ —è–∫ –Ω–∞–≤—á–∞–Ω–Ω—è —è–∫ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏ –∫—Ä–∞—â–µ,"
                         " –ø–µ—Ä–µ–∑–Ω—Ç–∞—Ü—ñ—ó —Ä—ñ–∑–Ω—ñ —ñ —Ç.–¥. ",
                         reply_markup=main_menu)


@dp.message_handler(text="–ß–µ–∫ –ª–∏—Å—Ç–∏")
async def check_list(message: types.Message, state: FSMContext):
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —á–µ–∫-–ª–∏—Å—Ç", reply_markup=check_lists_read)
    await state.set_state('check_lists_read')


@dp.message_handler(text="–ú–æ—ó –≥—Ä–æ—à—ñ")
async def my_money(message: types.Message):
    try:
        try:
            money_result = await db.get_money(message.from_user.id)
        except Exception as e:
            print(e)
            money_result = 0
        money_text = []
        all_money = 0.0
        if money_result is not 0:
            for date, money in money_result.items():
                money_text.append(f"{date} - {money}")
                all_money += float(money)
            await message.answer("–ú–æ—ó –≥—Ä–æ—à—ñ:\n" + "\n".join(money_text))
            await message.answer(f"–í—Å—å–æ–≥–æ –≥—Ä–æ—à–µ–π: {all_money}", reply_markup=add_money)
        else:
            await message.answer("–£ —Å–∏—Å—Ç–µ–º—ñ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤–∞—à—ñ –≥—Ä–æ—à—ñü§î\n"
                                 "–ú–æ–∂–µ—Ç–µ —ó—Ö –¥–æ–¥–∞—Ç–∏ –ø–æ –∫–Ω–æ–ø—Ü—ñ –∑–Ω–∏–∑—É!", reply_markup=add_money)
    except Exception as e:
        print(e)
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µü§î", reply_markup=main_menu)


@dp.message_handler(text="–î–æ–¥–∞—Ç–∏ –≥—Ä–æ—à—ñ")
async def add_my_money(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–æ—à–µ–π\n"
                         "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
                         "123.50 –∞–±–æ 200", reply_markup=remove_keyboard)
    await state.set_state('add_money')


@dp.message_handler(state='add_money')
async def add_money_text(message: types.Message, state: FSMContext):
    await db.add_money(telegram_id=message.from_user.id, money=message.text, date=datetime.now())
    await message.answer("–ì—Ä–æ—à—ñ –¥–æ–¥–∞–Ω–æ", reply_markup=main_menu)
    try:
        money_result = await db.get_money(message.from_user.id)
    except Exception as e:
        print(e)
        money_result = 0
    money_text = []
    all_money = 0.0
    if money_result is not 0:
        for date, money in money_result.items():
            money_text.append(f"{date} - {money}")
            all_money += float(money)
        await message.answer("–ú–æ—ó –≥—Ä–æ—à—ñ:\n" + "\n".join(money_text))
        await message.answer(f"–í—Å—å–æ–≥–æ –≥—Ä–æ—à–µ–π: {all_money}", reply_markup=add_money)
    await state.finish()


@dp.message_handler(text='–ó–º—ñ–Ω–∞')
async def work_time(message: types.Message):
    await message.answer('–ü—Ä–∏–≤—ñ—Çüëãüèª –ü–æ–¥—ñ–ª–∏—Å—å –≥–µ–æ-–ª–æ–∫–∞—Ü—ñ—î—é', reply_markup=geo_send)


@dp.message_handler(content_types=types.ContentTypes.LOCATION)
async def work_time_place(message: types.Message):
    await message.answer('–¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ –∑–∞–ª, –≤ —è–∫–æ–º—É —Å—å–æ–≥–æ–¥–Ω—ñ –ø—Ä–∞—Ü—é—î—à üí™üèª', reply_markup=location)


@dp.callback_query_handler(lambda call: call.data in ['hashtag_1_0', 'hashtag_2_0',
                                                      'litniy_maydanchik_1_0', 'litniy_maydanchik_2_0'])
async def hashtag_callback(call: types.CallbackQuery, state: FSMContext, dialog_manager: DialogManager):
    await call.message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü—ñ—é: {call.data}")
    await dialogs_manager(call.data)
    if call.data == 'hashtag_1_0':
        await dialog_manager.start(state=DialogStates.cl1, mode=StartMode.RESET_STACK)
    elif call.data == 'hashtag_2_0':
        await dialog_manager.start(state=DialogStates.cl2, mode=StartMode.RESET_STACK)
    elif call.data == 'litniy_maydanchik_1_0':
        await dialog_manager.start(state=DialogStates.lm1, mode=StartMode.RESET_STACK)
    elif call.data == 'litniy_maydanchik_2_0':
        await dialog_manager.start(state=DialogStates.lm2, mode=StartMode.RESET_STACK)

